{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\: )\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bloqade-Shuttle","text":"<p>Bloqade-shuttle is an SDK for simulation and running neutral atom quantum computers with explicit shuttling. The goal of this project is to provide both a frontend language for programming neutral atom quantum computers as well as an IR for optimizing scheduling of atom shuttling operations. While this project falls under the <code>Bloqade</code> umbrella, we are still in the early stages of development, and we are focusing on building a steering committee for this project and gathering feedback on the design of the language and the IR to further the development of neutral atom quantum computers and their applications.</p> <p>The language and IR with <code>Kirin</code> which provides a easy to use framework for building domain specific languages with a built-in python frontend and IR with a focus on lowering the barrier to entry for building compilers for more scientific applications.</p>"},{"location":"#installation","title":"Installation","text":"<p><pre><code>uv add bloqade-shuttle\n</code></pre> &lt;! TODO: update links to point to documentation website once available. &gt; See Installation for more details.</p> <p>Check out new Blog to understand more about tools and shuttle.</p>"},{"location":"contrib/","title":"Contributing","text":"<p>Please see Installation for instructions on how to set up your development environment.</p>"},{"location":"contrib/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>We use <code>pre-commit</code> to run the linter checks before you commit your changes. The pre-commit hooks are installed as part of the development dependencies. You can setup <code>pre-commit</code> using the following command:</p> <pre><code>pre-commit install\n</code></pre> <p>This will run the linter checks before you commit your changes. If the checks fail, the commit will be rejected. Most of the following sections can be checked by the pre-commit hooks.</p>"},{"location":"contrib/#running-the-tests","title":"Running the tests","text":"<p>We use <code>pytest</code> for testing. To run the tests, simply run:</p> <pre><code>pytest\n</code></pre> <p>or for a specific test file with the <code>-s</code> flag to show the output of the program:</p> <pre><code>pytest -s tests/test_program.py\n</code></pre> <p>lots of tests contains pretty printing of the IR themselves, so it's useful to see the output.</p>"},{"location":"contrib/#code-style","title":"Code style","text":"<p>We use <code>black</code> for code formatting. Besides the linter requirements, we also require the following good-to-have practices:</p>"},{"location":"contrib/#naming","title":"Naming","text":"<ul> <li>try not to use abbreviation as names, unless it's a common abbreviation like <code>idx</code> for <code>index</code></li> <li>try not create a lot of duplicated name prefix unless the extra information is necessary when accessing the class object.</li> <li>try to use <code>snake_case</code> for naming variables and functions, and <code>CamelCase</code> for classes.</li> </ul>"},{"location":"contrib/#comments","title":"Comments","text":"<ul> <li>try not to write comments, unless it's really necessary. The code should be self-explanatory.</li> <li>if you have to write comments, try to use <code>NOTE:</code>, <code>TODO:</code> <code>FIXME:</code> tags to make it easier to search for them.</li> </ul>"},{"location":"contrib/#documentation","title":"Documentation","text":"<p>We use <code>just</code> for mangaging command line tools and scripts. It should be installed when you run <code>uv sync</code>. To build the documentation, simply run:</p> <pre><code>just doc\n</code></pre> <p>This will launch a local server to preview the documentation. You can also run <code>just doc-build</code> to build the documentation without launching the server.</p>"},{"location":"install/","title":"Installation","text":"<p>Bloqade Shuttle is available on pypi registry. Shuttle supports Python 3.10 or later. We recommend using Python 3.10+ for the best experience.</p> <p>We strongly recommend developing project using <code>uv</code>, which is the official development environment for Kirin and Bloqade Shuttle. You can install <code>uv</code> using the following command:</p> Linux and macOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"install/#install-package","title":"Install package:","text":"<pre><code>uv add bloqade-shuttle\n</code></pre>"},{"location":"install/#development","title":"Development","text":"<p>We use <code>uv</code> to manage the development environment, after you install <code>uv</code>, you can install the development dependencies using the following command:</p> <pre><code>uv sync\n</code></pre> <p>Our code review requires that you pass the tests and the linting checks. We recommend you to install <code>pre-commit</code> to run the checks before you commit your changes, the command line tool <code>pre-commit</code> has been installed as part of the development dependencies. You can setup <code>pre-commit</code> using the following command:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/08/04/programming-moves-for-logical-magic-state-distillation/","title":"Programming Moves for Logical Magic State Distillation","text":"<p>Download script here.</p> <p>In this example, we program the move layout employed in the demonstration of logical magic state distillation for a distance-5 color code, as presented in QuEra\u2019s recent publication: \u201cExperimental demonstration of logical magic state distillation\u201d, Nature, 2025. This example focuses specifically on the atom moves and two-qubit gate operations between atom pairs. For clarity, we omit the single-qubit gates used in the full circuit. The circuits executed in the paper were carefully optimized for the architectural features of QuEra\u2019s neutral atom hardware. In particular, they leverage extensive parallelization of atom shuttling operations and simultaneous execution of two-qubit gates.</p> <p>We will demonstrate that <code>bloqade.shuttle</code> provides a concise and efficient interface for expressing such parallelized atom movements.</p> <p>As a first step, we import the relevant modules of <code>bloqade.shuttle</code> and <code>kirin</code>.</p> <pre><code>from typing import Any, TypeVar\n\nimport matplotlib\nfrom bloqade.geometry.dialects import grid\nfrom kirin.dialects import ilist\n\nfrom bloqade.shuttle import gate, init, spec\nfrom bloqade.shuttle.prelude import move\nfrom bloqade.shuttle.stdlib.spec import single_zone_spec\nfrom bloqade.shuttle.stdlib.waypoints import move_by_waypoints\nfrom bloqade.shuttle.visualizer import PathVisualizer\n</code></pre> <p>The primary subroutines used to implement atom transport are the <code>move</code> dialect and the <code>move_by_waypoints</code> function from the standard library. Programming atom movement in shuttle is centered around atoms arranged on two-dimensional grids. This reflects the capabilities of QuEra\u2019s Gemini-class hardware, which utilizes pairs of acousto-optic deflectors (AODs) to manipulate atom positions independently in the x- and y-directions.</p> <p>Grid-based layouts are chosen to optimize both the accessibility and parallelizability of atom moves, given AOD constraints such as simultaneous pickup of atoms aligned along columns and rows, as well as the need to prevent inter-atomic collisions during transport. The shuttle framework encodes AOD constraints directly into the semantics of move kernel objects. Attempting to compile or execute a move sequence that violates these constraints will result in a runtime or compile-time error, ensuring physical feasibility of the programmed layout on hardware</p> <p>As a first step, we define three global parameters that govern the geometry and dynamics of the atom array:</p> <ul> <li> <p><code>grid_spacing</code>: Specifies the lattice spacing of the initial two-dimensional grid. This grid corresponds to the static trap array defined by the spatial light modulator (SLM), which generates the optical tweezers used to hold the atoms.</p> </li> <li> <p><code>entangling_pair_dist</code>: Sets the target distance between pairs of atoms that are intended to undergo a two-qubit entangling gate. This distance must be sufficiently small to enable a strong Rydberg-mediated interaction, which is essential for high-fidelity entanglement. A typical value used in experiments is 2 \u03bcm.</p> </li> <li> <p><code>path_shift_dist</code>: During atom transport, it is often necessary to temporarily displace atoms off-grid to avoid collisions when crossing rows or columns. This parameter defines the offset applied to atoms during their movement, enabling collision-free shuttling through the array.</p> </li> </ul> <pre><code># define global geometry choices\ngrid_spacing = 10.0  # spacing of the grid traps\n\nentangling_pair_dist = 2.0  # distance between atom pairs getting entangled\n\npath_shift_dist = (\n    3.0  # distance that is used to shift the atom path out of the columns or rows\n)\n</code></pre>"},{"location":"blog/2025/08/04/programming-moves-for-logical-magic-state-distillation/#basic-move-pattern","title":"Basic move pattern","text":"<p>In this section, we program the precise atom movement pattern used in the experimental demonstration of logical magic state distillation. Due to the high degree of connectivity required by the circuit, atom transport is restricted to full-row and full-column movements, maximizing parallelism while respecting hardware constraints.</p> <p>We begin by specifying the initial atom grid configuration. This example focuses on a single entangling zone layout, where each logical qubit is encoded along a single row of atoms. For a distance-5 color code, each logical qubit comprises 17 physical qubits. The experimental implementation involved five such logical qubits.</p> <p>This geometry is conveniently defined using the <code>single_zone_spec</code> function, where:</p> <ul> <li><code>num_x</code> specifies the number of columns (i.e., physical qubits per logical qubit),</li> <li><code>num_y</code> specifies the number of rows (i.e., logical qubits), and</li> <li><code>spacing</code> defines the uniform distance between adjacent rows and columns.</li> </ul> <p>By construction, the grid is assumed to be equidistant in both spatial dimensions.</p> <pre><code>arch_spec = single_zone_spec(num_x=17, num_y=5, spacing=grid_spacing)\n</code></pre> <p>We define a set of helper kernel functions to enable coordinated movement of atoms along rows and columns of the grid. The core routine, <code>entangle_cols</code>, operates on two <code>IList</code> arguments -- <code>ctrls</code> and <code>qargs</code>. The <code>ctrls</code> list specifies the row indices of control qubits to be moved, while <code>qargs</code> indicates the row indices of the target qubits with which entanglement is to be performed.</p> <p>To register the function as a valid movement kernel for compilation to <code>bloqade.shuttle</code> IR, we decorate it with <code>@move</code>. This ensures compatibility with <code>kirin</code>\u2019s intermediate representation and hardware-aware compilation pipeline.</p> <p>The structure of the entangling routine comprises the following key steps:</p> <ol> <li> <p>Define initial trap sites: Specify the locations of static SLM-defined traps where all qubits are initially held.</p> </li> <li> <p>Construct subgrids: Define subgrids corresponding to the atoms to be picked up (<code>ctrls</code>), and subgrids defining the positions of the target qubits (<code>qargs</code>) near which the control atoms will be temporarily positioned to enable interaction.</p> </li> <li> <p>Specify waypoint trajectories: Construct ordered sequences of intermediate positions (waypoints) to guide atom transport between subgrids.</p> </li> <li> <p>Invoke <code>move_by_waypoints</code>: Use this function to concatenate the defined path segments, producing the full motion trajectory between initial and final subgrid configurations.</p> </li> </ol> <p>It is important to note that, in this layout, atoms always return to their original static trap positions following each entangling operation. This symmetry enables easy definition of the reverse path by simply inverting the sequence of waypoints.</p> <p>The <code>move_by_waypoints</code> function includes Boolean flags that indicate whether atoms should be picked up from or dropped into static traps at each stage. In the context of this circuit, we maintain atoms within the AODs during gate execution and only return them to their SLM-defined traps afterward. This is a deliberate design choice and not a general constraint. More sophisticated pickup/dropoff sequences can be constructed using multiple defined trap grids. However, care must be taken: dropping an atom at a site lacking an active trap will result in atom loss.</p> <pre><code>@move\ndef entangle_cols(ctrls: ilist.IList[int, Any], qargs: ilist.IList[int, Any]):\n    \"\"\"Function to entangle columns of atoms.\"\"\"\n\n    # fill the defined zone specification with traps\n    zone = spec.get_static_trap(zone_id=\"traps\")\n    # get the shape of the trap array\n    traps_shape = grid.shape(zone)\n    # generate an ilist from 0 to the number of rows in the trap array\n    all_rows = ilist.range(traps_shape[1])\n\n    # subgrid of control qubits that are picked up\n    src = grid.sub_grid(zone, ctrls, all_rows)\n    # subgrid of target qubits that are entangled with the control qubits\n    dst = grid.sub_grid(zone, qargs, all_rows)\n\n    # define the moves\n    # shifting the src grid down along the y-axis\n    first_waypoint = grid.shift(src, 0.0, -path_shift_dist)\n\n    # shift the to the respective x-positions of the target\n    # qubits and add an offset in the x-direction\n    second_waypoint = grid.shift(dst, -entangling_pair_dist, -path_shift_dist)\n\n    # shift the dst grid back up into the original y-position\n    # to form atom pairs that will get a gate\n    third_waypoint = grid.shift(dst, -entangling_pair_dist, 0.0)\n\n    # combine the waypoints into an ilist\n    waypoints = ilist.IList([src, first_waypoint, second_waypoint, third_waypoint])\n    # the revese waypoints defining the reverse path back to the original positions\n    reverse_waypoints = ilist.IList(\n        [third_waypoint, second_waypoint, first_waypoint, src]\n    )\n\n    # move the qubits along the waypoints, True means that the atoms are picked up\n    # and False means that they are not dropped at the end of the move\n    move_by_waypoints(waypoints, True, False)\n    # apply the entangling gate to the atoms that are now in the right positions\n    # (paired up)\n    gate.top_hat_cz(zone)\n    # move the atoms back to their original positions, False means that the atoms\n    # are not picked up (since they are still in the AOD) and True means that they\n    # are dropped back into their static trap site at the end of the move\n    move_by_waypoints(reverse_waypoints, False, True)\n</code></pre> <p>In an analogous manner, we can now define parallel transport operations for atoms along rows of the grid.</p> <pre><code>@move\ndef entangle_rows(ctrls: ilist.IList[int, Any], qargs: ilist.IList[int, Any]):\n    \"\"\"Function to entangle rows of atoms.\"\"\"\n\n    # get the positions of the static traps in the entangling zone\n    zone = spec.get_static_trap(zone_id=\"traps\")\n    # get the shape of the trap array\n    traps_shape = grid.shape(zone)\n    # generate an ilist from 0 to the number of columns in the trap array\n    all_cols = ilist.range(traps_shape[0])\n\n    src = grid.sub_grid(zone, all_cols, ctrls)\n    dst = grid.sub_grid(zone, all_cols, qargs)\n\n    # define the moves\n    # shift the src grid to the right along the x-axis\n    first_waypoint = grid.shift(src, entangling_pair_dist, 0.0)\n    # move the src grid to the y-positions of the target qubits\n    second_waypoint = grid.shift(dst, entangling_pair_dist, 0.0)\n\n    # combine the waypoints into an ilist\n    waypoints = ilist.IList([src, first_waypoint, second_waypoint])\n    # the revese waypoints defining the reverse path back to the original positions\n    reverse_waypoints = ilist.IList([second_waypoint, first_waypoint, src])\n\n    # move the qubits along the waypoints, True means that the atoms are picked up\n    # and False means that they are not dropped at the end of the move\n    move_by_waypoints(waypoints, True, False)\n    # apply the entangling gate to the atoms that are now in the right positions\n    # (paired up)\n    gate.top_hat_cz(zone)\n    # move the atoms back to their original positions, False means that the atoms\n    # are not picked up (since they are still in the AOD) and True means that they\n    # are dropped back into their static trap site at the end of the move\n    move_by_waypoints(reverse_waypoints, False, True)\n</code></pre> <p>Using these helper functions, we can now specify the complete move pattern in just a few lines of code by providing the control and target atom indices to the <code>entangle_cols</code> and <code>entangle_rows</code> functions.</p> <p>As before, we define this as a kernel function, annotated with the <code>@move</code> decorator to indicate compatibility with the bloqade.shuttle IR. This kernel is wrapped inside a closure and returned as a first-class move kernel function.</p> <pre><code>def make_main(entangle_cols, entangle_rows):\n    \"\"\"Helper function to create the main move kernel for logical magic state\n    distillation.\n\n    Args\n        entangle_cols: Function to entangle columns of atoms.\n        entangle_rows: Function to entangle rows of atoms.\n\n    Returns\n        main: The main move kernel function that defines the entire move pattern.\n\n    \"\"\"\n\n    @move\n    def main():\n        \"\"\"Main move kernel function that defines the entire move pattern for the\n        logical magic state distillation experiment.\n\n        \"\"\"\n\n        init.fill([spec.get_static_trap(zone_id=\"traps\")])\n\n        # encode logical qubits by entangling pairs of atoms in columns\n        entangle_cols([1, 10, 12, 13], [3, 7, 14, 16])\n        entangle_cols([4, 8, 11, 15], [7, 10, 14, 16])\n        entangle_cols([2, 8, 9, 10, 14], [4, 6, 7, 13, 16])\n        entangle_cols([0, 3, 5, 10, 11], [2, 6, 8, 12, 13])\n        entangle_cols([0, 2, 4, 6, 8, 12], [1, 3, 5, 7, 9, 15])\n\n        # logical qubit operations by moving entire rows of atoms\n        entangle_rows([0, 2], [1, 3])\n        entangle_rows([1, 3], [2, 4])\n        entangle_rows([3, 4], [0, 1])\n\n    return main\n\n\nker = make_main(entangle_cols, entangle_rows)\n</code></pre> <p>We can verify the correctness of the programmed move layout using the <code>PathVisualizer</code> utility provided by <code>bloqade.shuttle</code>. This tool displays the atom trajectories between defined waypoints and enables stepwise inspection of the full movement sequence via the <code>Continue</code> button. Red flashes are used to indicate the application of two-qubit gate pulses at the entangling zone during the sequence.</p> <pre><code>matplotlib.use(\"TkAgg\")  # requirement for PathVisualizer\n\nPathVisualizer(ker.dialects, arch_spec=arch_spec).run(ker, ())\n</code></pre>"},{"location":"blog/2025/08/04/programming-moves-for-logical-magic-state-distillation/#further-refining-the-move-pattern","title":"Further refining the move pattern","text":"<p>We now take a further step by introducing a slight optimization to the move pattern. In the previous example, control qubits were moved in both leftward and rightward directions, but ultimately all were positioned to the left of their respective target qubits. This introduces unnecessary displacement for half of the control atoms. To minimize total movement, we can instead position control atoms to the nearest side of the target qubits, i.e., those moving rightward are placed to the left, and those moving leftward are placed to the right of the targets.</p> <p>To implement this, we define an additional helper function that computes the nearest feasible final position for each control qubit, given the target layout and movement direction.</p> <pre><code>N = TypeVar(\"N\")\n\n\n@move\ndef get_final_positions(\n    src: ilist.IList[float, N], dst: ilist.IList[float, N], offset: float\n):\n    \"\"\"Helper function to compute the nearest final positions for entanglement.\"\"\"\n\n    assert len(src) == len(\n        dst\n    ), \"Source and destination lists must be of the same length.\"\n\n    def get_last_pos(i: int) -&gt; float:\n        assert src[i] != dst[i], \"Source and destination positions must not be equal.\"\n        if src[i] &lt; dst[i]:\n            return dst[i] - offset\n        elif src[i] &gt; dst[i]:\n            return dst[i] + offset\n        else:\n            return dst[i]\n\n    return ilist.map(get_last_pos, ilist.range(len(src)))\n</code></pre> <p>Using this helper function, we can now construct new waypoint sequences that incorporate the nearest final positions for the control qubits.</p> <pre><code>@move\ndef entangle_cols_low_dist(ctrls: ilist.IList[int, Any], qargs: ilist.IList[int, Any]):\n    \"\"\"Helper function to entangle columns of atoms on a grid in a single entangling\n    zone with optimized final positions (nearest location).\n\n    \"\"\"\n\n    zone = spec.get_static_trap(zone_id=\"traps\")\n    traps_shape = grid.shape(zone)\n    all_rows = ilist.range(traps_shape[1])\n\n    src = grid.sub_grid(zone, ctrls, all_rows)\n    dst = grid.sub_grid(zone, qargs, all_rows)\n\n    first_waypoint = grid.shift(src, 0.0, -path_shift_dist)\n\n    dst_x = grid.get_xpos(dst)\n    src_x = grid.get_xpos(src)\n\n    last_x = get_final_positions(\n        src_x, dst_x, entangling_pair_dist\n    )  # get the nearest final positions for the control qubits\n\n    second_pos = grid.from_positions(last_x, grid.get_ypos(first_waypoint))\n    last_pos = grid.from_positions(last_x, grid.get_ypos(dst))\n\n    waypoints = ilist.IList([src, first_waypoint, second_pos, last_pos])\n    reverse_waypoints = ilist.IList([last_pos, second_pos, first_waypoint, src])\n\n    move_by_waypoints(waypoints, True, False)\n    gate.top_hat_cz(zone)\n    move_by_waypoints(reverse_waypoints, False, True)\n</code></pre> <p>We can now define a new move kernel that implements the optimized column-wise transport pattern using the updated waypoint assignments.</p> <pre><code>ker = make_main(entangle_cols_low_dist, entangle_rows)\n</code></pre> <p>Finally, we can once again visualize the optimized move pattern using the PathVisualizer to inspect the resulting trajectories and validate the updated layout.</p> <pre><code>matplotlib.use(\"TkAgg\")  # requirement for PathVisualizer\n\nPathVisualizer(ker.dialects, arch_spec=arch_spec).run(ker, ())\n</code></pre>"},{"location":"reference/bloqade/shuttle/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/arch/","title":"Arch","text":""},{"location":"reference/bloqade/shuttle/arch/#bloqade.shuttle.arch.ArchSpecInterpreter","title":"ArchSpecInterpreter  <code>dataclass</code>","text":"<pre><code>ArchSpecInterpreter(arch_spec: ArchSpec)\n</code></pre> <p>               Bases: <code>ArchSpecMixin</code>, <code>Interpreter</code></p> <p>Interpreter that requires an architecture specification.</p>"},{"location":"reference/bloqade/shuttle/arch/#bloqade.shuttle.arch.ArchSpecMixin","title":"ArchSpecMixin  <code>dataclass</code>","text":"<pre><code>ArchSpecMixin(arch_spec: ArchSpec)\n</code></pre> <p>Base class for interpreters that require an architecture specification.</p>"},{"location":"reference/bloqade/shuttle/arch/#bloqade.shuttle.arch.Layout","title":"Layout  <code>dataclass</code>","text":"<pre><code>Layout(static_traps: dict[str, Grid], fillable: set[str])\n</code></pre>"},{"location":"reference/bloqade/shuttle/arch/#bloqade.shuttle.arch.Layout.fillable","title":"fillable  <code>instance-attribute</code>","text":"<pre><code>fillable: set[str]\n</code></pre> <p>The set of trap names that are fillable by the sorter.</p>"},{"location":"reference/bloqade/shuttle/arch/#bloqade.shuttle.arch.Layout.static_traps","title":"static_traps  <code>instance-attribute</code>","text":"<pre><code>static_traps: dict[str, Grid]\n</code></pre> <p>Abstract base class for layout.</p>"},{"location":"reference/bloqade/shuttle/prelude/","title":"Kernel decorator","text":""},{"location":"reference/bloqade/shuttle/analysis/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/analysis/zone/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/analysis/zone/analysis/","title":"Analysis","text":""},{"location":"reference/bloqade/shuttle/analysis/zone/analysis/#bloqade.shuttle.analysis.zone.analysis.ZoneAnalysis","title":"ZoneAnalysis  <code>dataclass</code>","text":"<pre><code>ZoneAnalysis(arch_spec: ArchSpec = ArchSpec())\n</code></pre> <p>               Bases: <code>Forward[Zone]</code></p> <p>Analysis for zones in the Qourier context. This analysis extends the Forward analysis to work with Zone types.</p>"},{"location":"reference/bloqade/shuttle/analysis/zone/lattice/","title":"Lattice","text":""},{"location":"reference/bloqade/shuttle/analysis/zone/impl/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/analysis/zone/impl/grid/","title":"Grid","text":""},{"location":"reference/bloqade/shuttle/analysis/zone/impl/py/","title":"Py","text":""},{"location":"reference/bloqade/shuttle/analysis/zone/impl/spec/","title":"Spec","text":""},{"location":"reference/bloqade/shuttle/codegen/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/codegen/taskgen/","title":"Taskgen","text":""},{"location":"reference/bloqade/shuttle/dialects/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/action/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/action/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/action/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/action/_interface/#bloqade.shuttle.dialects.action._interface.move","title":"move","text":"<pre><code>move(grid: Grid[Nx, Ny]) -&gt; None\n</code></pre> <p>Move the aod from its current location to the given location.</p> Source code in <code>src/bloqade/shuttle/dialects/action/_interface.py</code> <pre><code>@_wraps(Move)\ndef move(grid: Grid[Nx, Ny]) -&gt; None:\n    \"\"\"Move the aod from its current location to the given location.\"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/action/_interface/#bloqade.shuttle.dialects.action._interface.set_loc","title":"set_loc","text":"<pre><code>set_loc(grid: Grid[Nx, Ny]) -&gt; None\n</code></pre> <p>Set the location of the aod using a grid.</p> Source code in <code>src/bloqade/shuttle/dialects/action/_interface.py</code> <pre><code>@_wraps(Set)\ndef set_loc(grid: Grid[Nx, Ny]) -&gt; None:\n    \"\"\"Set the location of the aod using a grid.\"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/action/_interface/#bloqade.shuttle.dialects.action._interface.turn_off","title":"turn_off","text":"<pre><code>turn_off(x_tones: slice, y_tones: slice) -&gt; None\n</code></pre><pre><code>turn_off(\n    x_tones: slice,\n    y_tones: ilist.IList[int, Any] | list[int],\n) -&gt; None\n</code></pre><pre><code>turn_off(\n    x_tones: ilist.IList[int, Any] | list[int],\n    y_tones: slice,\n) -&gt; None\n</code></pre><pre><code>turn_off(\n    x_tones: ilist.IList[int, Any] | list[int],\n    y_tones: ilist.IList[int, Any] | list[int],\n) -&gt; None\n</code></pre> <pre><code>turn_off(x_tones, y_tones)\n</code></pre> <p>Turn on tones at the given x and y locations.</p> Source code in <code>src/bloqade/shuttle/dialects/action/_interface.py</code> <pre><code>@_wraps(TurnOff)\ndef turn_off(x_tones, y_tones):\n    \"\"\"Turn on tones at the given x and y locations.\"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/action/_interface/#bloqade.shuttle.dialects.action._interface.turn_on","title":"turn_on","text":"<pre><code>turn_on(x_tones: slice, y_tones: slice) -&gt; None\n</code></pre><pre><code>turn_on(\n    x_tones: slice,\n    y_tones: ilist.IList[int, Any] | list[int],\n) -&gt; None\n</code></pre><pre><code>turn_on(\n    x_tones: ilist.IList[int, Any] | list[int],\n    y_tones: slice,\n) -&gt; None\n</code></pre><pre><code>turn_on(\n    x_tones: ilist.IList[int, Any] | list[int],\n    y_tones: ilist.IList[int, Any] | list[int],\n) -&gt; None\n</code></pre> <pre><code>turn_on(x_tones, y_tones)\n</code></pre> <p>Turn on tones at the given x and y locations.</p> Source code in <code>src/bloqade/shuttle/dialects/action/_interface.py</code> <pre><code>@_wraps(TurnOn)\ndef turn_on(x_tones, y_tones):\n    \"\"\"Turn on tones at the given x and y locations.\"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/action/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/atom/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/atom/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/atom/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/atom/_interface/#bloqade.shuttle.dialects.atom._interface.measure","title":"measure","text":"<pre><code>measure(\n    atoms: list[Atom], qubits: list[Qubit]\n) -&gt; ilist.IList[int, Any]\n</code></pre><pre><code>measure(\n    atoms: ilist.IList[Atom, NumAtoms], qubits: list[Qubit]\n) -&gt; ilist.IList[int, NumAtoms]\n</code></pre><pre><code>measure(\n    atoms: list[Atom], qubits: ilist.IList[Qubit, NumAtoms]\n) -&gt; ilist.IList[int, NumAtoms]\n</code></pre><pre><code>measure(\n    atoms: ilist.IList[Atom, NumAtoms],\n    qubits: ilist.IList[Qubit, NumAtoms],\n) -&gt; ilist.IList[int, NumAtoms]\n</code></pre> <pre><code>measure(atoms, qubits) -&gt; ilist.IList[int, Any]\n</code></pre> <p>Perform a destructive measurement on the specified atoms.</p> <p>Parameters:</p> Name Type Description Default <code>atoms</code> <code>list[Atom] | IList[Atom, NumAtoms]</code> <p>The atoms to be measured.</p> required <code>qubits</code> <code>list[Qubit] | IList[Qubit, NumAtoms]</code> <p>The qubits associated with the atoms being measured.</p> required <p>Returns:</p> Type Description <code>IList[int, Any]</code> <p>ilist.IList[int, NumAtoms | Any]: A list of measurement results, where each result corresponds to an atom.</p> Source code in <code>src/bloqade/shuttle/dialects/atom/_interface.py</code> <pre><code>@_wraps(Measure)\ndef measure(atoms, qubits) -&gt; ilist.IList[int, Any]:\n    \"\"\"\n    Perform a destructive measurement on the specified atoms.\n\n    Args:\n        atoms (list[Atom] | ilist.IList[Atom, NumAtoms]): The atoms to be measured.\n        qubits (list[Qubit] | ilist.IList[Qubit, NumAtoms]): The qubits associated with the atoms being measured.\n\n    Returns:\n        ilist.IList[int, NumAtoms | Any]: A list of measurement results, where each result corresponds to an atom.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/atom/_interface/#bloqade.shuttle.dialects.atom._interface.move","title":"move","text":"<pre><code>move(\n    zone: grid.Grid, atoms: list[Atom]\n) -&gt; ilist.IList[Atom, Any]\n</code></pre><pre><code>move(\n    zone: grid.Grid, atoms: ilist.IList[Atom, NumAtoms]\n) -&gt; ilist.IList[Atom, NumAtoms]\n</code></pre> <pre><code>move(zone, atoms) -&gt; ilist.IList[Atom, Any]\n</code></pre> <p>Create new atoms in the specified zone with the given qubits. Note that the specific locations of the atoms will be determined by the compiler.</p> <p>Parameters:</p> Name Type Description Default <code>zone</code> <code>Grid</code> <p>The grid zone where to move the atoms.</p> required <code>atoms</code> <code>list[Atom] | IList[Atom, NumQubits]</code> <p>The atoms to be moved.</p> required <p>Returns:</p> Type Description <code>IList[Atom, Any]</code> <p>ilist.IList[Atom, NumQubits | Any]: A list of newly created atoms.</p> Source code in <code>src/bloqade/shuttle/dialects/atom/_interface.py</code> <pre><code>@_wraps(Move)\ndef move(zone, atoms) -&gt; ilist.IList[Atom, Any]:\n    \"\"\"\n    Create new atoms in the specified zone with the given qubits. Note that the specific locations of the atoms will be determined by the compiler.\n\n\n    Args:\n        zone (grid.Grid): The grid zone where to move the atoms.\n        atoms (list[Atom] | ilist.IList[Atom, NumQubits]): The atoms to be moved.\n\n    Returns:\n        ilist.IList[Atom, NumQubits | Any]: A list of newly created atoms.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/atom/_interface/#bloqade.shuttle.dialects.atom._interface.move_next_to","title":"move_next_to","text":"<pre><code>move_next_to(\n    zone: grid.Grid[Any, Any],\n    ctrls: list[Atom],\n    qargs: list[Atom],\n) -&gt; tuple[\n    ilist.IList[Atom, NumAtoms], ilist.IList[Atom, NumAtoms]\n]\n</code></pre><pre><code>move_next_to(\n    zone: grid.Grid[Any, Any],\n    ctrls: ilist.IList[Atom, NumAtoms],\n    qargs: list[Atom],\n) -&gt; tuple[\n    ilist.IList[Atom, NumAtoms], ilist.IList[Atom, NumAtoms]\n]\n</code></pre><pre><code>move_next_to(\n    zone: grid.Grid[Any, Any],\n    ctrls: list[Atom],\n    qargs: ilist.IList[Atom, NumAtoms],\n) -&gt; tuple[\n    ilist.IList[Atom, NumAtoms], ilist.IList[Atom, NumAtoms]\n]\n</code></pre><pre><code>move_next_to(\n    zone: grid.Grid[Any, Any],\n    ctrls: ilist.IList[Atom, NumAtoms],\n    qargs: ilist.IList[Atom, NumAtoms],\n) -&gt; tuple[\n    ilist.IList[Atom, NumAtoms], ilist.IList[Atom, NumAtoms]\n]\n</code></pre> <pre><code>move_next_to(zone, ctrls, qargs)\n</code></pre> <p>Apply an operation to the specified atoms, optionally moving them in the process if the gate operation requires it. After the operation, the atoms potentially change their positions which will be reflected in the returned list.</p> <p>Parameters:</p> Name Type Description Default <code>zone</code> <code>Grid[Any, Any]</code> <p>The grid zone where the atoms are located.</p> required <code>ctrls</code> <code>list[Atom] | IList[Atom, NumAtoms]</code> <p>The control atoms for the operation.</p> required <code>qargs</code> <code>list[Atom] | IList[Atom, NumAtoms]</code> <p>The target atoms for the operation.</p> required <p>Returns:</p> Type Description <p>tuple[ilist.IList[Atom, NumAtoms], ilist.IList[Atom, NumAtoms]]: A tuple containing two lists of atoms: the control atoms and the target atoms after the operation. the first list contains the updated ctrls, and the second list contains the updated qargs.</p> Source code in <code>src/bloqade/shuttle/dialects/atom/_interface.py</code> <pre><code>@_wraps(MoveNextTo)\ndef move_next_to(zone, ctrls, qargs):\n    \"\"\"\n    Apply an operation to the specified atoms, optionally moving them in the process if the gate operation requires it.\n    After the operation, the atoms potentially change their positions which will be reflected in the returned list.\n\n    Args:\n        zone (grid.Grid[Any, Any]): The grid zone where the atoms are located.\n        ctrls (list[Atom] | ilist.IList[Atom, NumAtoms]): The control atoms for the operation.\n        qargs (list[Atom] | ilist.IList[Atom, NumAtoms]): The target atoms for the operation.\n\n    Returns:\n        tuple[ilist.IList[Atom, NumAtoms], ilist.IList[Atom, NumAtoms]]:\n            A tuple containing two lists of atoms: the control atoms and the target atoms after the operation.\n            the first list contains the updated ctrls, and the second list contains the updated qargs.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/atom/_interface/#bloqade.shuttle.dialects.atom._interface.new","title":"new","text":"<pre><code>new(\n    zone: grid.Grid, qubits: list[Qubit]\n) -&gt; ilist.IList[Atom, Any]\n</code></pre><pre><code>new(\n    zone: grid.Grid, qubits: ilist.IList[Qubit, NumQubits]\n) -&gt; ilist.IList[Atom, NumQubits]\n</code></pre> <pre><code>new(zone, qubits)\n</code></pre> <p>Create new atoms in the specified zone with the given qubits.</p> <p>Parameters:</p> Name Type Description Default <code>zone</code> <code>Grid</code> <p>The grid zone where atoms will be created.</p> required <code>qubits</code> <code>list[Qubit] | IList[Qubit, NumQubits]</code> <p>The qubits associated with the new atoms.</p> required <p>Returns:</p> Type Description <p>ilist.IList[Atom, NumQubits | Any]: A list of newly created atoms.</p> Source code in <code>src/bloqade/shuttle/dialects/atom/_interface.py</code> <pre><code>@_wraps(New)\ndef new(zone, qubits):\n    \"\"\"\n    Create new atoms in the specified zone with the given qubits.\n\n    Args:\n        zone (grid.Grid): The grid zone where atoms will be created.\n        qubits (list[Qubit] | ilist.IList[Qubit, NumQubits]): The qubits associated with the new atoms.\n\n    Returns:\n        ilist.IList[Atom, NumQubits | Any]: A list of newly created atoms.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/atom/_interface/#bloqade.shuttle.dialects.atom._interface.reset_position","title":"reset_position","text":"<pre><code>reset_position(\n    atoms: list[Atom], qubits: list[Qubit]\n) -&gt; None\n</code></pre><pre><code>reset_position(\n    atoms: list[Atom], qubits: ilist.IList[Qubit, NumAtoms]\n) -&gt; None\n</code></pre><pre><code>reset_position(\n    atoms: ilist.IList[Atom, NumAtoms], qubits: list[Qubit]\n) -&gt; None\n</code></pre><pre><code>reset_position(\n    atoms: ilist.IList[Atom, NumAtoms],\n    qubits: ilist.IList[Qubit, NumAtoms],\n) -&gt; None\n</code></pre> <pre><code>reset_position(atoms, qubits) -&gt; None\n</code></pre> <p>Reset the position of atoms to their initial state, terminating the moves.</p> <p>Parameters:</p> Name Type Description Default <code>atoms</code> <code>list[Atom] | IList[Atom, NumAtoms]</code> <p>The atoms whose positions will be reset.</p> required <code>qubits</code> <code>list[Qubit] | IList[Qubit, NumAtoms]</code> <p>The qubits associated with the atoms being reset.</p> required Source code in <code>src/bloqade/shuttle/dialects/atom/_interface.py</code> <pre><code>@_wraps(ResetPosition)\ndef reset_position(atoms, qubits) -&gt; None:\n    \"\"\"\n    Reset the position of atoms to their initial state, terminating the moves.\n\n    Args:\n        atoms (list[Atom] | ilist.IList[Atom, NumAtoms]): The atoms whose positions will be reset.\n        qubits (list[Qubit] | ilist.IList[Qubit, NumAtoms]): The qubits associated with the atoms being reset.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/atom/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/atom/types/","title":"Types","text":""},{"location":"reference/bloqade/shuttle/dialects/filled/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/filled/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/filled/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/filled/concrete/","title":"Concrete","text":""},{"location":"reference/bloqade/shuttle/dialects/filled/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/filled/types/","title":"Types","text":""},{"location":"reference/bloqade/shuttle/dialects/gate/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/gate/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/gate/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/gate/_interface/#bloqade.shuttle.dialects.gate._interface.global_r","title":"global_r","text":"<pre><code>global_r(axis_angle: float, rotation_angle: float)\n</code></pre> <p>Apply a global R gate over all zones.</p> <p>Parameters:</p> Name Type Description Default <code>axis_angle</code> <code>float</code> <p>The angle of the axis for the R gate.</p> required <code>rotation_angle</code> <code>float</code> <p>The angle of rotation for the R gate.</p> required Source code in <code>src/bloqade/shuttle/dialects/gate/_interface.py</code> <pre><code>@_wraps(GlobalR)\ndef global_r(axis_angle: float, rotation_angle: float):\n    \"\"\"Apply a global R gate over all zones.\n\n    Args:\n        axis_angle (float): The angle of the axis for the R gate.\n        rotation_angle (float): The angle of rotation for the R gate.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/gate/_interface/#bloqade.shuttle.dialects.gate._interface.global_rz","title":"global_rz","text":"<pre><code>global_rz(rotation_angle: float)\n</code></pre> <p>Apply a global Rz gate over all zones.</p> <p>Parameters:</p> Name Type Description Default <code>rotation_angle</code> <code>float</code> <p>The angle of rotation for the Rz gate.</p> required Source code in <code>src/bloqade/shuttle/dialects/gate/_interface.py</code> <pre><code>@_wraps(GlobalRz)\ndef global_rz(rotation_angle: float):\n    \"\"\"Apply a global Rz gate over all zones.\n\n    Args:\n        rotation_angle (float): The angle of rotation for the Rz gate.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/gate/_interface/#bloqade.shuttle.dialects.gate._interface.local_r","title":"local_r","text":"<pre><code>local_r(\n    axis_angle: float,\n    rotation_angle: float,\n    zone: grid.Grid[Any, Any],\n) -&gt; None\n</code></pre> <p>Apply a local Rz gate to a zone.</p> <p>Parameters:</p> Name Type Description Default <code>rotation_angle</code> <code>float</code> <p>The angle of rotation for the Rz gate.</p> required <code>zone</code> <code>GridType[Any, Any]</code> <p>The grid zone where the gate is applied.</p> required Source code in <code>src/bloqade/shuttle/dialects/gate/_interface.py</code> <pre><code>@_wraps(LocalR)\ndef local_r(\n    axis_angle: float, rotation_angle: float, zone: grid.Grid[Any, Any]\n) -&gt; None:\n    \"\"\"Apply a local Rz gate to a zone.\n\n    Args:\n        rotation_angle (float): The angle of rotation for the Rz gate.\n        zone (grid.GridType[Any, Any]): The grid zone where the gate is applied.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/gate/_interface/#bloqade.shuttle.dialects.gate._interface.local_rz","title":"local_rz","text":"<pre><code>local_rz(\n    rotation_angle: float, zone: grid.Grid[Any, Any]\n) -&gt; None\n</code></pre> <p>Apply a local Rz gate to a zone.</p> <p>Parameters:</p> Name Type Description Default <code>rotation_angle</code> <code>float</code> <p>The angle of rotation for the Rz gate.</p> required <code>zone</code> <code>GridType[Any, Any]</code> <p>The grid zone where the gate is applied.</p> required Source code in <code>src/bloqade/shuttle/dialects/gate/_interface.py</code> <pre><code>@_wraps(LocalRz)\ndef local_rz(rotation_angle: float, zone: grid.Grid[Any, Any]) -&gt; None:\n    \"\"\"Apply a local Rz gate to a zone.\n\n    Args:\n        rotation_angle (float): The angle of rotation for the Rz gate.\n        zone (grid.GridType[Any, Any]): The grid zone where the gate is applied.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/gate/_interface/#bloqade.shuttle.dialects.gate._interface.top_hat_cz","title":"top_hat_cz","text":"<pre><code>top_hat_cz(\n    zone: grid.Grid[Any, Any],\n    upper_buffer: float = 3.0,\n    lower_buffer: float = 3.0,\n) -&gt; None\n</code></pre> <p>Apply a top hat CZ gate.</p> <p>Parameters:</p> Name Type Description Default <code>zone</code> <code>GridType[Any, Any]</code> <p>The grid zone where the gate is applied.</p> required <code>upper_buffer</code> <code>float</code> <p>The upper buffer distance for the top hat above the zone.</p> <code>3.0</code> <code>lower_buffer</code> <code>float</code> <p>The lower buffer distance for the top hat below the zone.</p> <code>3.0</code> Source code in <code>src/bloqade/shuttle/dialects/gate/_interface.py</code> <pre><code>@_wraps(TopHatCZ)\ndef top_hat_cz(\n    zone: grid.Grid[Any, Any],\n    upper_buffer: float = 3.0,\n    lower_buffer: float = 3.0,\n) -&gt; None:\n    \"\"\"Apply a top hat CZ gate.\n\n    Args:\n        zone (grid.GridType[Any, Any]): The grid zone where the gate is applied.\n        upper_buffer (float): The upper buffer distance for the top hat above the zone.\n        lower_buffer (float): The lower buffer distance for the top hat below the zone.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/gate/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/gate/stmts/#bloqade.shuttle.dialects.gate.stmts.GlobalR","title":"GlobalR  <code>kirin-statement</code>","text":"<pre><code>GlobalR(\n    axis_angle: ir.SSAValue, rotation_angle: ir.SSAValue\n)\n</code></pre> <p>               Bases: <code>Statement</code></p> <p>Apply gate op globally</p>"},{"location":"reference/bloqade/shuttle/dialects/gate/stmts/#bloqade.shuttle.dialects.gate.stmts.GlobalRz","title":"GlobalRz  <code>kirin-statement</code>","text":"<pre><code>GlobalRz(rotation_angle: ir.SSAValue)\n</code></pre> <p>               Bases: <code>Statement</code></p> <p>Apply gate op globally</p>"},{"location":"reference/bloqade/shuttle/dialects/gate/stmts/#bloqade.shuttle.dialects.gate.stmts.LocalR","title":"LocalR  <code>kirin-statement</code>","text":"<pre><code>LocalR(\n    axis_angle: ir.SSAValue,\n    rotation_angle: ir.SSAValue,\n    zone: ir.SSAValue,\n)\n</code></pre> <p>               Bases: <code>Statement</code></p> <p>Apply gate op locally</p>"},{"location":"reference/bloqade/shuttle/dialects/gate/stmts/#bloqade.shuttle.dialects.gate.stmts.LocalRz","title":"LocalRz  <code>kirin-statement</code>","text":"<pre><code>LocalRz(rotation_angle: ir.SSAValue, zone: ir.SSAValue)\n</code></pre> <p>               Bases: <code>Statement</code></p> <p>Apply gate op locally</p>"},{"location":"reference/bloqade/shuttle/dialects/init/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/init/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/init/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/init/_interface/#bloqade.shuttle.dialects.init._interface.fill","title":"fill","text":"<pre><code>fill(\n    locations: (\n        ilist.IList[grid.Grid[Any, Any], Any]\n        | list[grid.Grid[Any, Any]]\n    )\n)\n</code></pre> <p>Fill the given locations with the given value.</p> <p>Parameters:</p> Name Type Description Default <code>locations</code> <code>IList[Grid[Any, Any], Any]</code> <p>The locations to fill. Note that these locations must be valid static trap locations.</p> required Source code in <code>src/bloqade/shuttle/dialects/init/_interface.py</code> <pre><code>@_wraps(Fill)\ndef fill(\n    locations: ilist.IList[grid.Grid[Any, Any], Any] | list[grid.Grid[Any, Any]],\n):\n    \"\"\"Fill the given locations with the given value.\n\n    Args:\n        locations (ilist.IList[grid.Grid[Any,Any], Any]): The locations to fill.\n            Note that these locations must be valid static trap locations.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/init/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/measure/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/measure/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/measure/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/measure/_interface/#bloqade.shuttle.dialects.measure._interface.measure","title":"measure","text":"<pre><code>measure(\n    regions: tuple[grid.Grid[NumX, NumY], ...]\n) -&gt; tuple[MeasurementArray[NumX, NumY], ...]\n</code></pre> <p>Measure the given regions and return the results.</p> <p>Parameters:</p> Name Type Description Default <code>regions</code> <code>tuple[Grid[NumX, NumY], ...]</code> <p>A tuple of regions to measure.</p> required <p>Returns:</p> Type Description <code>tuple[MeasurementArray[NumX, NumY], ...]</code> <p>A tuple of measurement results.</p> Source code in <code>src/bloqade/shuttle/dialects/measure/_interface.py</code> <pre><code>@wraps(Measure)\ndef measure(\n    regions: tuple[grid.Grid[NumX, NumY], ...],\n) -&gt; tuple[MeasurementArray[NumX, NumY], ...]:\n    \"\"\"\n    Measure the given regions and return the results.\n\n    Args:\n        regions: A tuple of regions to measure.\n\n    Returns:\n        A tuple of measurement results.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/measure/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/measure/types/","title":"Types","text":""},{"location":"reference/bloqade/shuttle/dialects/measure/types/#bloqade.shuttle.dialects.measure.types.MeasurementArray","title":"MeasurementArray","text":"<p>               Bases: <code>Generic[NumRows, NumCols]</code></p>"},{"location":"reference/bloqade/shuttle/dialects/measure/types/#bloqade.shuttle.dialects.measure.types.MeasurementArray.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(indices: tuple[int, int]) -&gt; MeasurementResult\n</code></pre> <p>Get a measurement result from the array using the given indices.</p> Source code in <code>src/bloqade/shuttle/dialects/measure/types.py</code> <pre><code>def __getitem__(self, indices: tuple[int, int]) -&gt; MeasurementResult:\n    \"\"\"\n    Get a measurement result from the array using the given indices.\n    \"\"\"\n    raise NotImplementedError(\n        \"This Class is a placeholder and should be replaced with the actual implementation.\"\n    )\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/path/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/path/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/path/concrete/","title":"Concrete","text":""},{"location":"reference/bloqade/shuttle/dialects/path/constprop/","title":"Constprop","text":""},{"location":"reference/bloqade/shuttle/dialects/path/spec_interp/","title":"Spec interp","text":""},{"location":"reference/bloqade/shuttle/dialects/path/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/path/types/","title":"Types","text":""},{"location":"reference/bloqade/shuttle/dialects/schedule/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/schedule/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/schedule/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/schedule/_interface/#bloqade.shuttle.dialects.schedule._interface.device_fn","title":"device_fn","text":"<pre><code>device_fn(\n    move_fn: ir.Method[Param, None],\n    x_tones: list[int] | ilist.IList[int, Any],\n    y_tones: list[int] | ilist.IList[int, Any],\n) -&gt; DeviceFunction[Param]\n</code></pre> <p>Create a device function from a move function.</p> <p>Parameters:</p> Name Type Description Default <code>move_fn</code> <code>Callable</code> <p>The move function to be wrapped.</p> required <code>x_tones</code> <code>list[int]|</code> <p>The x tones to be used in the device function.</p> required <code>y_tones</code> <code>list[int] | IList[int, Any]</code> <p>The y tones to be used in the device function.</p> required Source code in <code>src/bloqade/shuttle/dialects/schedule/_interface.py</code> <pre><code>@_wraps(NewDeviceFunction)\ndef device_fn(\n    move_fn: ir.Method[Param, None],\n    x_tones: list[int] | ilist.IList[int, Any],\n    y_tones: list[int] | ilist.IList[int, Any],\n) -&gt; DeviceFunction[Param]:\n    \"\"\"Create a device function from a move function.\n\n    Args:\n        move_fn (Callable): The move function to be wrapped.\n        x_tones (list[int]|): The x tones to be used in the device function.\n        y_tones: The y tones to be used in the device function.\n\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/schedule/_interface/#bloqade.shuttle.dialects.schedule._interface.reverse","title":"reverse","text":"<pre><code>reverse(\n    device_fn: DeviceFunction[Param],\n) -&gt; ReverseDeviceFunction[Param]\n</code></pre> <p>Create a reverse device function from a device function.</p> <p>Parameters:</p> Name Type Description Default <code>device_fn</code> <code>DeviceFunction</code> <p>The device function to be reversed.</p> required Source code in <code>src/bloqade/shuttle/dialects/schedule/_interface.py</code> <pre><code>@_wraps(Reverse)\ndef reverse(\n    device_fn: DeviceFunction[Param],\n) -&gt; ReverseDeviceFunction[Param]:\n    \"\"\"Create a reverse device function from a device function.\n\n    Args:\n        device_fn (DeviceFunction): The device function to be reversed.\n\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/dialects/schedule/concrete/","title":"Concrete","text":""},{"location":"reference/bloqade/shuttle/dialects/schedule/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/dialects/schedule/types/","title":"Types","text":""},{"location":"reference/bloqade/shuttle/dialects/spec/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/dialects/spec/_dialect/","title":"dialect","text":""},{"location":"reference/bloqade/shuttle/dialects/spec/_interface/","title":"statements","text":""},{"location":"reference/bloqade/shuttle/dialects/spec/concrete/","title":"Concrete","text":""},{"location":"reference/bloqade/shuttle/dialects/spec/stmts/","title":"Stmts","text":""},{"location":"reference/bloqade/shuttle/passes/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/passes/fold/","title":"Fold","text":""},{"location":"reference/bloqade/shuttle/passes/fold/#bloqade.shuttle.passes.fold.AggressiveUnroll","title":"AggressiveUnroll  <code>dataclass</code>","text":"<pre><code>AggressiveUnroll()\n</code></pre> <p>               Bases: <code>Pass</code></p> <p>Fold pass to fold control flow</p>"},{"location":"reference/bloqade/shuttle/passes/fold/#bloqade.shuttle.passes.fold.AggressiveUnroll.inline_heuristic","title":"inline_heuristic  <code>classmethod</code>","text":"<pre><code>inline_heuristic(node: ir.Statement) -&gt; bool\n</code></pre> <p>The heuristic to decide whether to inline a function call or not. inside loops and if-else, only inline simple functions, i.e. functions with a single block</p> Source code in <code>src/bloqade/shuttle/passes/fold.py</code> <pre><code>@classmethod\ndef inline_heuristic(cls, node: ir.Statement) -&gt; bool:\n    \"\"\"The heuristic to decide whether to inline a function call or not.\n    inside loops and if-else, only inline simple functions, i.e.\n    functions with a single block\n    \"\"\"\n    if not isinstance(node.parent_stmt, (scf.For, scf.IfElse)):\n        return True  # always inline calls outside of loops and if-else\n\n    if (trait := node.get_trait(ir.CallableStmtInterface)) is None:\n        return False  # not a callable, don't inline to be safe\n    region = trait.get_callable_region(node)\n    return len(region.blocks) == 1\n</code></pre>"},{"location":"reference/bloqade/shuttle/passes/hint_zone/","title":"Hint zone","text":""},{"location":"reference/bloqade/shuttle/passes/hint_zone/#bloqade.shuttle.passes.hint_zone.HintZone","title":"HintZone  <code>dataclass</code>","text":"<pre><code>HintZone(arch_spec: spec.ArchSpec)\n</code></pre> <p>               Bases: <code>Pass</code></p> <p>This pass adds zone hints to SSA values based on the analysis results.</p>"},{"location":"reference/bloqade/shuttle/passes/inject_spec/","title":"Inject spec","text":""},{"location":"reference/bloqade/shuttle/passes/schedule2path/","title":"Schedule2path","text":""},{"location":"reference/bloqade/shuttle/passes/schedule2path/#bloqade.shuttle.passes.schedule2path.ScheduleToPath","title":"ScheduleToPath","text":"<p>               Bases: <code>Pass</code></p> <p>Pass to convert schedule dialect to path dialect.</p>"},{"location":"reference/bloqade/shuttle/rewrite/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/rewrite/auto_scheduler/","title":"Auto scheduler","text":""},{"location":"reference/bloqade/shuttle/rewrite/desugar/","title":"Desugar","text":""},{"location":"reference/bloqade/shuttle/rewrite/schedule2path/","title":"Schedule2path","text":""},{"location":"reference/bloqade/shuttle/rewrite/schedule2path/#bloqade.shuttle.rewrite.schedule2path.Canonicalize","title":"Canonicalize","text":"<p>               Bases: <code>RewriteRule</code></p> <p>Flatten nested parallel regions into a single parallel region.</p>"},{"location":"reference/bloqade/shuttle/stdlib/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/stdlib/moves/","title":"Moves","text":""},{"location":"reference/bloqade/shuttle/stdlib/moves/#bloqade.shuttle.stdlib.moves.default_move_cz_impl","title":"default_move_cz_impl","text":"<pre><code>default_move_cz_impl(\n    zone: grid.Grid[Any, Any],\n    x_shift: float,\n    y_shift: float,\n    ctrl_x_ids: ilist.IList[int, NumX],\n    ctrl_y_ids: ilist.IList[int, NumY],\n    qarg_x_ids: ilist.IList[int, NumX],\n    qarg_y_ids: ilist.IList[int, NumY],\n)\n</code></pre> <p>Move atoms from the start ids and run cz gate with the atoms at the end ids.</p> <p>Parameters:</p> Name Type Description Default <code>ctrl_x_ids</code> <code>IList[int, NumX]</code> <p>The x-indices of the starting positions.</p> required <code>ctrl_y_ids</code> <code>IList[int, NumY]</code> <p>The y-indices of the starting positions.</p> required <code>qarg_x_ids</code> <code>IList[int, NumX]</code> <p>The x-indices of the ending positions.</p> required <code>qarg_y_ids</code> <code>IList[int, NumY]</code> <p>The y-indices of the ending positions.</p> required Source code in <code>src/bloqade/shuttle/stdlib/moves.py</code> <pre><code>@move\ndef default_move_cz_impl(\n    zone: grid.Grid[Any, Any],\n    x_shift: float,\n    y_shift: float,\n    ctrl_x_ids: ilist.IList[int, NumX],\n    ctrl_y_ids: ilist.IList[int, NumY],\n    qarg_x_ids: ilist.IList[int, NumX],\n    qarg_y_ids: ilist.IList[int, NumY],\n):\n    \"\"\"Move atoms from the start ids and run cz gate with the atoms at the end ids.\n\n    Args:\n        ctrl_x_ids (ilist.IList[int, NumX]): The x-indices of the starting positions.\n        ctrl_y_ids (ilist.IList[int, NumY]): The y-indices of the starting positions.\n        qarg_x_ids (ilist.IList[int, NumX]): The x-indices of the ending positions.\n        qarg_y_ids (ilist.IList[int, NumY]): The y-indices of the ending positions.\n    \"\"\"\n    if len(ctrl_x_ids) &lt; 1 or len(qarg_x_ids) &lt; 1:\n        return\n\n    fwd_kernel = schedule.device_fn(\n        single_zone_move_cz,\n        ilist.range(len(ctrl_x_ids)),\n        ilist.range(len(ctrl_y_ids)),\n    )\n    bwd_kernel = schedule.reverse(fwd_kernel)\n\n    fwd_kernel(zone, ctrl_x_ids, ctrl_y_ids, qarg_x_ids, qarg_y_ids, x_shift, y_shift)\n    gate.top_hat_cz(zone)\n    bwd_kernel(zone, qarg_x_ids, qarg_y_ids, ctrl_x_ids, ctrl_y_ids, x_shift, y_shift)\n</code></pre>"},{"location":"reference/bloqade/shuttle/stdlib/spec/","title":"Spec","text":""},{"location":"reference/bloqade/shuttle/stdlib/spec/#bloqade.shuttle.stdlib.spec.single_zone_spec","title":"single_zone_spec","text":"<pre><code>single_zone_spec(\n    num_x: int, num_y: int, spacing: float = 10.0\n) -&gt; spec.ArchSpec\n</code></pre> <p>Create a static trap spec with a single zone. compatible with the stdlib</p> <p>Parameters:</p> Name Type Description Default <code>num_x</code> <code>int</code> <p>Number of traps in the x direction.</p> required <code>num_y</code> <code>int</code> <p>Number of traps in the y direction.</p> required <code>spacing</code> <code>float</code> <p>Spacing between traps in both directions. Default is 10.0.</p> <code>10.0</code> <p>Returns:</p> Type Description <code>ArchSpec</code> <p>spec.Spec: A specification object containing the layout with a single zone.</p> Source code in <code>src/bloqade/shuttle/stdlib/spec.py</code> <pre><code>def single_zone_spec(num_x: int, num_y: int, spacing: float = 10.0) -&gt; spec.ArchSpec:\n    \"\"\"Create a static trap spec with a single zone. compatible with the stdlib\n\n    Args:\n        num_x (int): Number of traps in the x direction.\n        num_y (int): Number of traps in the y direction.\n        spacing (float): Spacing between traps in both directions. Default is 10.0.\n\n    Returns:\n        spec.Spec: A specification object containing the layout with a single zone.\n\n    \"\"\"\n    x_spacing = tuple(repeat(spacing, num_x - 1))\n    y_spacing = tuple(repeat(spacing, num_y - 1))\n\n    return spec.ArchSpec(\n        layout=spec.Layout(\n            static_traps={\"traps\": grid.Grid(x_spacing, y_spacing, 0.0, 0.0)},\n            fillable=set([\"traps\"]),\n        )\n    )\n</code></pre>"},{"location":"reference/bloqade/shuttle/stdlib/waypoints/","title":"Waypoints","text":""},{"location":"reference/bloqade/shuttle/stdlib/waypoints/#bloqade.shuttle.stdlib.waypoints.move_by_waypoints","title":"move_by_waypoints","text":"<pre><code>move_by_waypoints(\n    waypoints: ilist.IList[\n        grid.Grid[NumX, NumY], NumWaypoints\n    ],\n    pick: bool = True,\n    drop: bool = True,\n)\n</code></pre> <p>Move the tweezer by a list of waypoints.</p> <p>Parameters:</p> Name Type Description Default <code>waypoints</code> <code>IList[Grid[NumX, NumY], NumWaypoints]</code> <p>The waypoints to move to.</p> required <code>pick</code> <code>bool</code> <p>Whether to pick up the tweezer at the first waypoint. Defaults to True.</p> <code>True</code> <code>drop</code> <code>bool</code> <p>Whether to drop the tweezer at the last waypoint. Defaults to True.</p> <code>True</code> Source code in <code>src/bloqade/shuttle/stdlib/waypoints.py</code> <pre><code>@move\ndef move_by_waypoints(\n    waypoints: ilist.IList[grid.Grid[NumX, NumY], NumWaypoints],\n    pick: bool = True,\n    drop: bool = True,\n):\n    \"\"\"Move the tweezer by a list of waypoints.\n\n    Args:\n        waypoints (ilist.IList[grid.Grid[NumX, NumY], NumWaypoints]): The waypoints to move to.\n        pick (bool): Whether to pick up the tweezer at the first waypoint. Defaults to True.\n        drop (bool): Whether to drop the tweezer at the last waypoint. Defaults to True.\n\n    \"\"\"\n    if len(waypoints) &lt; 1:\n        return\n\n    shape = grid.shape(waypoints[0])\n    device_kernel = schedule.device_fn(\n        move_by_waypoints_kernel,\n        ilist.range(shape[0]),\n        ilist.range(shape[1]),\n    )\n    device_kernel(waypoints, pick, drop)\n</code></pre>"},{"location":"reference/bloqade/shuttle/stdlib/waypoints/#bloqade.shuttle.stdlib.waypoints.move_by_waypoints_kernel","title":"move_by_waypoints_kernel","text":"<pre><code>move_by_waypoints_kernel(\n    waypoints: ilist.IList[\n        grid.Grid[NumX, NumY], NumWaypoints\n    ],\n    pick: bool,\n    drop: bool,\n)\n</code></pre> <p>Pick up the tweezer at the specified location.</p> Source code in <code>src/bloqade/shuttle/stdlib/waypoints.py</code> <pre><code>@tweezer\ndef move_by_waypoints_kernel(\n    waypoints: ilist.IList[grid.Grid[NumX, NumY], NumWaypoints],\n    pick: bool,\n    drop: bool,\n):\n    \"\"\"Pick up the tweezer at the specified location.\"\"\"\n    action.set_loc(waypoints[0])\n    if pick:\n        action.turn_on(action.ALL, action.ALL)\n\n    num_waypoints = len(waypoints)\n    for i in range(1, num_waypoints):\n        action.move(waypoints[i])\n\n    if drop:\n        action.turn_off(action.ALL, action.ALL)\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/visualizer/interp/","title":"Interp","text":""},{"location":"reference/bloqade/shuttle/visualizer/interp/#bloqade.shuttle.visualizer.interp.PathVisualizer","title":"PathVisualizer  <code>dataclass</code>","text":"<pre><code>PathVisualizer(\n    arch_spec: ArchSpec,\n    *,\n    renderer: Plotter = default_renderer()\n)\n</code></pre> <p>               Bases: <code>ArchSpecInterpreter</code>, <code>Generic[Plotter]</code></p> <p>Debugging interpreter for visualizing the execution of paths.</p>"},{"location":"reference/bloqade/shuttle/visualizer/impl/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/visualizer/impl/gate/","title":"Gate","text":""},{"location":"reference/bloqade/shuttle/visualizer/impl/init/","title":"Init","text":""},{"location":"reference/bloqade/shuttle/visualizer/impl/measure/","title":"Measure","text":""},{"location":"reference/bloqade/shuttle/visualizer/impl/path/","title":"Path","text":""},{"location":"reference/bloqade/shuttle/visualizer/renderers/","title":"Index","text":""},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/","title":"Interface","text":""},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface","title":"RendererInterface","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.clear_paths","title":"clear_paths  <code>abstractmethod</code>","text":"<pre><code>clear_paths() -&gt; None\n</code></pre> <p>Clear the current renderer.</p> Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>@abstractmethod\ndef clear_paths(self) -&gt; None:\n    \"\"\"Clear the current renderer.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.global_r","title":"global_r","text":"<pre><code>global_r() -&gt; None\n</code></pre> <p>Render the global render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>def global_r(self) -&gt; None:\n    \"\"\"Render the global render of the given location.\n\n    Args:\n        location (grid.Grid): The location to render.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.global_rz","title":"global_rz","text":"<pre><code>global_rz() -&gt; None\n</code></pre> <p>Render the global render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>def global_rz(self) -&gt; None:\n    \"\"\"Render the global render of the given location.\n\n    Args:\n        location (grid.Grid): The location to render.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.local_r","title":"local_r","text":"<pre><code>local_r(location: grid.Grid) -&gt; None\n</code></pre> <p>Render the local render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>def local_r(self, location: grid.Grid) -&gt; None:\n    \"\"\"Render the local render of the given location.\n\n    Args:\n        location (grid.Grid): The location to render.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.local_rz","title":"local_rz","text":"<pre><code>local_rz(location: grid.Grid) -&gt; None\n</code></pre> <p>Render the local render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>def local_rz(self, location: grid.Grid) -&gt; None:\n    \"\"\"Render the local render of the given location.\n\n    Args:\n        location (grid.Grid): The location to render.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.render_path","title":"render_path  <code>abstractmethod</code>","text":"<pre><code>render_path(pth: path.Path) -&gt; None\n</code></pre> <p>Render the given path.</p> <p>Parameters:</p> Name Type Description Default <code>pth</code> <code>Path</code> <p>The path to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>@abstractmethod\ndef render_path(self, pth: path.Path) -&gt; None:\n    \"\"\"Render the given path.\n\n    Args:\n        pth (path.Path): The path to render.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.render_traps","title":"render_traps  <code>abstractmethod</code>","text":"<pre><code>render_traps(traps: grid.Grid, zone_id: str) -&gt; None\n</code></pre> <p>Render the given traps.</p> <p>Parameters:</p> Name Type Description Default <code>traps</code> <code>IList[Grid, Any]</code> <p>The traps to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>@abstractmethod\ndef render_traps(self, traps: grid.Grid, zone_id: str) -&gt; None:\n    \"\"\"Render the given traps.\n\n    Args:\n        traps (ilist.IList[grid.Grid, Any]): The traps to render.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.set_title","title":"set_title  <code>abstractmethod</code>","text":"<pre><code>set_title(title: str) -&gt; None\n</code></pre> <p>Set the title of the renderer.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title to set.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>@abstractmethod\ndef set_title(self, title: str) -&gt; None:\n    \"\"\"Set the title of the renderer.\n\n    Args:\n        title (str): The title to set.\n\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.show","title":"show  <code>abstractmethod</code>","text":"<pre><code>show() -&gt; None\n</code></pre> <p>Show all rendered entities.</p> Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>@abstractmethod\ndef show(self) -&gt; None:\n    \"\"\"Show all rendered entities.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/interface/#bloqade.shuttle.visualizer.renderers.interface.RendererInterface.top_hat_cz","title":"top_hat_cz","text":"<pre><code>top_hat_cz(\n    location: grid.Grid,\n    upper_buffer: float,\n    lower_buffer: float,\n) -&gt; None\n</code></pre> <p>Render the top hat CZ of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/interface.py</code> <pre><code>def top_hat_cz(\n    self, location: grid.Grid, upper_buffer: float, lower_buffer: float\n) -&gt; None:\n    \"\"\"Render the top hat CZ of the given location.\n\n    Args:\n        location (grid.Grid): The location to render.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/","title":"Matplotlib","text":""},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer","title":"MatplotlibRenderer  <code>dataclass</code>","text":"<pre><code>MatplotlibRenderer(\n    ax: Axes = default_ax(),\n    gate_display_options: GateDisplayOptions = GateDisplayOptions(),\n    *,\n    sleep_time: float = 0.1\n)\n</code></pre> <p>               Bases: <code>RendererInterface</code></p>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.clear_paths","title":"clear_paths","text":"<pre><code>clear_paths() -&gt; None\n</code></pre> <p>Clear the current renderer.</p> Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def clear_paths(self) -&gt; None:\n    while self.curr_path_lines:\n        artist = self.curr_path_lines.pop()\n        artist.remove()\n\n    self.ax.set_title(\"\")\n    plt.show(block=False)\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.global_r","title":"global_r","text":"<pre><code>global_r() -&gt; None\n</code></pre> <p>Render the global render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def global_r(self) -&gt; None:\n    x = [self.xmin - 10, self.xmax + 10]\n    y = [self.ymin - 10, self.ymax + 10]\n\n    line = self.ax.fill_between(\n        x,\n        y[0],\n        y[1],\n        color=self.gate_display_options.r_color,\n        alpha=self.gate_display_options.alpha,\n    )\n    self.show()\n    line.remove()\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.global_rz","title":"global_rz","text":"<pre><code>global_rz() -&gt; None\n</code></pre> <p>Render the global render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def global_rz(self) -&gt; None:\n    x = [self.xmin - 10, self.xmax + 10]\n    y = [self.ymin - 10, self.ymax + 10]\n\n    line = self.ax.fill_between(\n        x,\n        y[0],\n        y[1],\n        color=self.gate_display_options.rz_color,\n        alpha=self.gate_display_options.alpha / 2,\n    )\n\n    self.show()\n    line.remove()\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.local_r","title":"local_r","text":"<pre><code>local_r(location: Grid) -&gt; None\n</code></pre> <p>Render the local render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def local_r(self, location: Grid) -&gt; None:\n    x, y = np.meshgrid(location.x_positions, location.y_positions)\n\n    (points,) = self.ax.plot(\n        x.flatten(),\n        y.flatten(),\n        marker=\"o\",\n        markersize=self.gate_display_options.local_spot_size,\n        linestyle=\"\",\n        color=self.gate_display_options.r_color,\n        alpha=self.gate_display_options.alpha,\n    )\n\n    self.show()\n    points.remove()\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.local_rz","title":"local_rz","text":"<pre><code>local_rz(location: Grid) -&gt; None\n</code></pre> <p>Render the local render of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def local_rz(self, location: Grid) -&gt; None:\n    x, y = np.meshgrid(location.x_positions, location.y_positions)\n\n    (points,) = self.ax.plot(\n        x.flatten(),\n        y.flatten(),\n        marker=\"o\",\n        markersize=self.gate_display_options.local_spot_size,\n        linestyle=\"\",\n        color=self.gate_display_options.rz_color,\n        alpha=self.gate_display_options.alpha,\n    )\n\n    self.show()\n    points.remove()\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.render_path","title":"render_path","text":"<pre><code>render_path(pth: path.Path) -&gt; None\n</code></pre> <p>Render the given path.</p> <p>Parameters:</p> Name Type Description Default <code>pth</code> <code>Path</code> <p>The path to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def render_path(self, pth: path.Path) -&gt; None:\n    all_waypoints = [\n        way_point\n        for path_action in pth.path\n        if isinstance(path_action, taskgen.WayPointsAction)\n        for way_point in path_action.way_points\n    ]\n\n    if len(all_waypoints) == 0:\n        return\n\n    first_waypoint = all_waypoints[0]\n    curr_x = first_waypoint.x_positions\n    curr_y = first_waypoint.y_positions\n\n    color_map = plt.get_cmap(\"viridis\")\n\n    num_steps = len(all_waypoints) - 1\n    step = 0\n\n    x_tones = np.array(pth.x_tones)\n    y_tones = np.array(pth.y_tones)\n\n    x = all_waypoints[0].x_positions\n    y = all_waypoints[0].y_positions\n\n    for action in pth.path:\n        if isinstance(action, taskgen.WayPointsAction):\n            for way_point in action.way_points:\n                x = way_point.x_positions\n                y = way_point.y_positions\n\n                for (x_tone, x_start, x_end), (y_tone, y_start, y_end) in product(\n                    zip(pth.x_tones, curr_x, x), zip(pth.y_tones, curr_y, y)\n                ):\n                    self.update_x_bounds(x_start)\n                    self.update_x_bounds(x_end)\n                    self.update_y_bounds(y_start)\n                    self.update_y_bounds(y_end)\n                    dx = x_end - x_start\n                    dy = y_end - y_start\n\n                    if dx == 0 and dy == 0:\n                        continue\n\n                    is_on = (\n                        x_tone in self.active_x_tones\n                        and y_tone in self.active_y_tones\n                    )\n\n                    line = self.ax.arrow(\n                        x_start,\n                        y_start,\n                        dx,\n                        dy,\n                        width=0.1,\n                        color=color_map(step / num_steps),\n                        length_includes_head=True,\n                        linestyle=\"-\" if is_on else (0, (5, 10)),\n                        alpha=1.0 if is_on else 0.5,\n                        linewidth=1.0 if is_on else 0.5,\n                    )\n\n                    line.set_edgecolor(line.get_facecolor())\n                    self.curr_path_lines.append(line)\n\n                curr_x = x\n                curr_y = y\n                step += 1\n\n        elif isinstance(action, taskgen.TurnOnAction):\n            self.active_x_tones.update(x_tones[action.x_tone_indices])\n            self.active_y_tones.update(y_tones[action.y_tone_indices])\n\n        elif isinstance(action, taskgen.TurnOffAction):\n            self.active_x_tones.difference_update(x_tones[action.x_tone_indices])\n            self.active_y_tones.difference_update(y_tones[action.y_tone_indices])\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.render_traps","title":"render_traps","text":"<pre><code>render_traps(traps: Grid, zone_id: str) -&gt; None\n</code></pre> <p>Render the given traps.</p> <p>Parameters:</p> Name Type Description Default <code>traps</code> <code>IList[Grid, Any]</code> <p>The traps to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def render_traps(self, traps: Grid, zone_id: str) -&gt; None:\n    x, y = np.meshgrid(traps.x_positions, traps.y_positions)\n\n    self.ax.plot(x.flatten(), y.flatten(), marker=\"o\", markersize=3, linestyle=\"\")\n    self.update_x_bounds(traps.x_positions[0])\n    self.update_x_bounds(traps.x_positions[-1])\n    self.update_y_bounds(traps.y_positions[0])\n    self.update_y_bounds(traps.y_positions[-1])\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.set_title","title":"set_title","text":"<pre><code>set_title(title: str) -&gt; None\n</code></pre> <p>Set the title of the renderer.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title to set.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def set_title(self, title: str) -&gt; None:\n    self.ax.set_title(title)\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.show","title":"show","text":"<pre><code>show() -&gt; None\n</code></pre> <p>Show all rendered entities.</p> Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def show(self) -&gt; None:\n    plt.show(block=False)\n    self.continue_button.on_clicked(lambda event: setattr(self, \"sleeping\", False))\n\n    self.sleeping = True\n    while self.sleeping:\n        plt.pause(self.sleep_time)\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.MatplotlibRenderer.top_hat_cz","title":"top_hat_cz","text":"<pre><code>top_hat_cz(\n    location: Grid, upper_buffer: float, lower_buffer: float\n) -&gt; None\n</code></pre> <p>Render the top hat CZ of the given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Grid</code> <p>The location to render.</p> required Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def top_hat_cz(\n    self, location: Grid, upper_buffer: float, lower_buffer: float\n) -&gt; None:\n    ymin, ymax = location.y_bounds()\n\n    assert ymin is not None and ymax is not None, \"Y bounds must be defined\"\n    ymin = ymin - lower_buffer\n    ymax = ymax + upper_buffer\n    ymin_keepout = ymin - 3\n    ymax_keepout = ymax + 3\n    x = [self.xmin - 10, self.xmax + 10]\n    inner = self.ax.fill_between(\n        x,\n        ymin,\n        ymax,\n        color=self.gate_display_options.rydberg_color,\n        alpha=self.gate_display_options.alpha,\n    )\n    outer = self.ax.fill_between(\n        x,\n        ymin_keepout,\n        ymax_keepout,\n        color=self.gate_display_options.rydberg_color,\n        alpha=self.gate_display_options.alpha / 2,\n    )\n\n    self.show()\n    inner.remove()\n    outer.remove()\n</code></pre>"},{"location":"reference/bloqade/shuttle/visualizer/renderers/matplotlib/#bloqade.shuttle.visualizer.renderers.matplotlib.default_ax","title":"default_ax","text":"<pre><code>default_ax() -&gt; Axes\n</code></pre> <p>Create a default matplotlib Axes object.</p> Source code in <code>src/bloqade/shuttle/visualizer/renderers/matplotlib.py</code> <pre><code>def default_ax() -&gt; Axes:\n    \"\"\"Create a default matplotlib Axes object.\"\"\"\n    _, ax = plt.subplots(1, 1)\n    ax.set_aspect(\"equal\", adjustable=\"box\")\n    ax.set_xlabel(\"X (um)\")\n    ax.set_ylabel(\"Y (um)\")\n    return ax\n</code></pre>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/tutorial/","title":"Tutorial","text":""}]}